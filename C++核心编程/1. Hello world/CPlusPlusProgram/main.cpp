//
//  main.cpp
//  CPlusPlusProgram
//
//  Created by Yu Yang on 10/23/23.
//

/*
 标准输入输出流
 i input 输入
 o output 输出
 stream 流
 
 相当于c中的stdio.h
 */
#include <iostream>


/*
 使用标准的命名空间
 */
using namespace std;

int main() {
    
    /*
     cout 标准输出流对象
     << 左移 在C++下有了新的寓意 用于在cout后拼接输出的内容
     endl  end line 刷新缓冲区 并且换行
     */
    cout << "Hello world" << endl;
    
    return EXIT_SUCCESS;
}



/*
 ================================================================================================================
 c++中 using namespace std; 是什么意思?
 ================================================================================================================
 在C++编程中，`using namespace std;`是一个命名空间声明。它的意思是将C++标准库中的函数、类等内容引入到当前的代码中，这样在编写代码时就可以直接使用C++标准库提供的功能，而不必每次都要写出完整的命名空间路径。

 举个例子，如果你想使用C++标准库中的cout对象来输出信息，那么如果没有使用`using namespace std;`，你需要这样写代码：`std::cout << "Hello, world!";`。但是如果你在代码开头使用了`using namespace std;`，那么你就可以直接写成`cout << "Hello, world!";`。

 需要注意的是，过度使用`using namespace std;`可能会导致命名冲突，所以在大型项目中，为了避免可能的命名冲突，建议尽量明确指定命名空间路径，而不是一味地使用`using namespace std;`。
 ================================================================================================================

 
 
 ================================================================================================================
 c++中命名空间是什么?怎么理解?
 ================================================================================================================
 在C++中，命名空间主要用于解决名称冲突的问题。

 在编程中，我们会使用许多变量、函数、类等，并给它们取名字。但是随着项目越来越大，代码越来越复杂，可能会出现两个或更多的函数或者类有同样的名字，这就产生了所谓的"命名冲突"。

 为了避免这种情况，C++引入了命名空间这个概念。你可以把命名空间看作是一种封装或者容器，它可以包含各种变量、函数、类等，而这些内容都在命名空间的范围内。不同的命名空间可以包含相同名字的函数或类，因为每个命名空间实际上都定义了一个新的作用域。

 比如，你可以在两个不同的命名空间中定义两个同名的函数：

 ```cpp
 namespace A {
     void fun() {
         cout << "This is A::fun()" << endl;
     }
 }

 namespace B {
     void fun() {
         cout << "This is B::fun()" << endl;
     }
 }
 ```

 然后在调用这两个函数时，通过指定命名空间来区分：

 ```cpp
 A::fun();  // 调用A命名空间中的fun()
 B::fun();  // 调用B命名空间中的fun()
 ```

 这样就避免了命名冲突，提高了代码的可读性和维护性。
 ================================================================================================================

 */


//int main(int argc, const char * argv[]) {
//    // insert code here...
//    std::cout << "Hello, World!\n";
//    return 0;
//}


